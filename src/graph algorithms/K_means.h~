#include <Objet.h>
#include <Cluster.h>
#include <random_sampling.h>
#include <misc.h>

//Initialise les clusters pour K Means
//Pour le moment, tire aléatoirement k objets dans
//l'ensemble d'objets (algorithme R implémenté dans misc.h)
Cluster* initialization(Objet* object_set, int k) {
    Objet* init_objects = random_sampling(object_set, k);
    Cluster init_clusters[k];
    int i;

    for(i=0; i < k; i++) {
	Cluster cl = new Cluster;
	cl.change_identifier(i);
	cl.add_to_cluster(init_objects[i]);
	init_clusters[i] = cl;
    };

    return init_clusters;
};

int should_stop(int* current_assign, int* last_assign, int n) {
    int i = 0;
    
    while(current_assign[i] == last_assign[i]) {
	i++;
    };
    if (i == n) {
	return 1;
    };
    return 0;
};


Objet compute_mean(Cluster cl) {
    

};


//k est le nombre estimé initialement de clusters (borne inf)
//L'algorithme peut en créer d'autres si la distance entre
//les moyennes #m des clusters présents et l'objet #oo considéré
//est trop importante
//Typiquement: pour tout #m, dist(#m, #oo) > dist_lim
//L'algo retourne 0 ssi il n'y a pas eu de problème
int k_means(int k, float dist_lim, Objet* object_set) {
    Cluster* cluster_set = initialization(object_set, k);
    //#object_set doit être non vide !
    int n = get_array_length(object_set);
    int* current_assign[n];
    int* last_assign[n];
};
